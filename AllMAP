while true do
    if string.find(game:GetService("HttpService"):GetAsync("https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/A%20re.lua"), "re") then
       loadstring(game:HttpGet("https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/AllMAP"))()
        break
    end
    task.wait(0)
end
local places = {
    [12004594806] = {message = "Sword Piece", url = "https://raw.githubusercontent.com/RimuraHub/MAP/main/SwordPiece.txt"},
    [18271034370] = {message = "Sakura Piece", url = "https://raw.githubusercontent.com/RimuraHub/MAP/main/SakuraPiece.lua"},
    [18688206652] = {message = "Ijul Piece 2", url = "https://raw.githubusercontent.com/RimuraHub/MAP/main/ijul.lua"},
    [16448761503] = {message = "Rung Sea", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Rung%20Sea.lua%20(3)%20(1).txt"},
    [18968803452] = {message = "Muyong-Piece", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Muyo.lua"},
    [137664479590005] = {message = "Muyong-Piece W2", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Muyosea2.lua"},
    [105557873963854] = {message = "CeeTo Fruit", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/CeeTo%20Piece.lua"},
    [6925849909] = {message = "City Banna", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/City%20Banna.lua"},
    [116291960732071] = {message = "Obito Piece", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/ObitoPiece.lua"},
    [86639052909924] = {message = "Verse Piece", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Verse%20piece.lua"},
    [87081024978735] = {message = "Soy Piece", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Soy%20Piece.lua"},
    [18874085388] = {message = "Exotic Sea", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Exotic%20sea.lua"},
    [112000728351623] = {message = "Maze Piece", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Maze%20piece.lua"},
    [100811961417979] = {message = "Monkey Legacy", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Monkey%20lega.lua"},
    [16732694052] = {message = "Fisch", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Fisch.lua"},
    [95295765150201] = {message = "RockFruit", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Rock%20fruit%20New.lua"},
    [100340127867802] = {message = "ZaroSea", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Zaroseam.lua"},
    [111347281646457] = {message = "Moodeng Fruit", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Muden.lua"},
    [76091669089883] = {message = "Moodeng Fruit Dungeon", url = "https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Muden.lua"}
}

local function sendErrorLogToDiscord(errorMessage)
    local httpService = game:GetService("HttpService")
    local stats = game:GetService("Stats")
    local userInput = game:GetService("UserInputService")
    local player = game.Players.LocalPlayer
    local placeId = game.PlaceId
    local localTime = os.date("!%Y-%m-%dT%H:%M:%SZ")

    local embed = {
        title = "Log Script Rimuru Hub",
        color = 0x9600FF,
        fields = {
            { name = "# Info Map", value = "Details about the map", inline = false },
            { name = "Name", value = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name, inline = true },
            { name = "PlaceId", value = placeId, inline = true },
            { name = "Map Url", value = "https://www.roblox.com/games/" .. placeId, inline = false },
            { name = "# Info Player", value = "Details about the player", inline = false },
            { name = "Player Profile", value = "https://www.roblox.com/users/" .. player.UserId .. "/profile", inline = true },
            { name = "Name", value = player.Name, inline = true },
            { name = "UserId", value = player.UserId, inline = true },
            { name = "Device Type", value = userInput.TouchEnabled and "Mobile" or "PC", inline = true },
            { name = "Input Method", value = userInput.KeyboardEnabled and "Keyboard" or "Touch", inline = true },
            { name = "# Info Server", value = "Details about the server", inline = false },
            { name = "Server ID", value = game.JobId, inline = true },
            { name = "Ping", value = stats.Network.ServerStatsItem["Data Ping"]:GetValueString(), inline = true },
            { name = "# Info Performance", value = "Performance metrics", inline = false },
            { name = "Memory Usage", value = math.floor(collectgarbage("count")) .. " KB", inline = true },
            { name = "Session Duration", value = math.floor(workspace.DistributedGameTime) .. " seconds", inline = true },
            { name = "FPS", value = string.format("%.2f", stats.FrameRateManager.RenderedFps), inline = true },
            { name = "# Info Error", value = "Error details", inline = false },
            { name = "Error Details", value = errorMessage or "No error reported.", inline = false },
        },
        timestamp = localTime,
    }

    local success, response = pcall(function()
        return (syn and syn.request or http_request)({
            Url = "https://discord.com/api/webhooks/1313516409350787093/TOtvLY6wHFxMfbPIlaJulngvju0WI02o6gij45zEdneQzLwEHcgdaDS0fKOvb_iHZ8vs",
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = httpService:JSONEncode({
                username = "Rimuru Hub",
                avatar_url = "https://cdn.discordapp.com/attachments/1273992951780999231/1305094174445666365/3_20241018191802.png",
                embeds = { embed },
            }),
        })
    end)

    if not success then
        warn("Error sending log: " .. tostring(response))
    end
end

local function ie()
    local s, r = pcall(identifyexecutor)
    if s then return r end
    return (SENTINEL_LOADED and "Sentinel") or (XPROTECT and "SirHurt") or (PROTOSMASHER_LOADED and "Protosmasher") or "Unknown"
end

local function createErrorGUI(em)
    local PN = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
    local ex = ie()
    local sg = Instance.new("ScreenGui")
    local tl = Instance.new("TextLabel")
    sg.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    tl.Parent = sg
    tl.Text = "RimuruHub\n------------------\nMap Name: " .. PN .. "\nExploit: " .. ex .. "\n------------------\nPlease wait for the fix.\n------------------\nError: " .. em
    tl.Font = Enum.Font.SourceSansBold
    tl.TextSize = 24
    tl.TextColor3 = Color3.fromRGB(255, 255, 255)
    tl.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    tl.TextWrapped = true
    tl.Size = UDim2.new(0, tl.TextBounds.X + 20, 0, tl.TextBounds.Y + 20)
    tl.Position = UDim2.new(0.5, -tl.Size.X.Offset / 2, 0.5, -tl.Size.Y.Offset / 2)
end

local function loadScript(url)
    local success, err = pcall(function()
        loadstring(game:HttpGet(url))()
    end)

    if not success then
        warn("Error loading script: " .. err)
        createErrorGUI(err)
        sendErrorLogToDiscord(err)
    end
end

loadstring(game:HttpGet("https://raw.githubusercontent.com/RimuraHub/MAP/refs/heads/main/Log.lua"))()

local place = places[game.PlaceId]
if place then
    print(place.message)
    loadScript(place.url)
else
    game.Players.LocalPlayer:Kick("Not Supported")
end
